#!/bin/bash
img_name=`echo $GIT_URL | awk -F / '{print $(NF)}' |  sed s/'.git'//`
dimg_name=`echo $img_name | tr '[:upper:]' '[:lower:]'`
instruction=$1
#echo $BRANCH_NAME
OBRANCH_NAME=$BRANCH_NAME
if [[ $BRANCH_NAME = feature* ]]
then
    BRANCH_NAME=feature
fi
env >>/tmp/cd-ui
#echo $BRANCH_NAME
. /var/lib/jenkins/scripts/environment_version.sh
. /var/lib/jenkins/scripts/$BRANCH_NAME

deploy_env=`cat /var/lib/jenkins/scripts/environment`
nex_ip=10.60.17.13
port=1415
rport=1416
SonarQubeServer="http://10.60.17.12:9000"
SonarLogin="f70b77bcf99080dc32f2487788372246dfa94657"
DbUserName=CBSV2_PRODUCTS
DbPassword=CBSV2_PRODUCTS
DbHost=10.60.17.14
DbPort=1521
DbService=CBSV2POC

if [[ $BRANCH_NAME = release ]]
then
  cwd=`pwd`
  cd /var/lib/jenkins/release-manifest
  rm -rf cbsv2poc.releasecontentdefinition >/dev/null
  git clone  --quiet https://github.muthoot.local/Emsyne/cbsv2poc.releasecontentdefinition.git
  cd $cwd
fi


function verify()
{
if [ -z "k8-manifest" ]
    then
      echo "Kubernetics Manefestfiles not found"
      exit 1;
fi

if [ -z "/var/lib/jenkins/scripts/KUBECONFIG/kube.yml" ]
    then
      echo "TKG KUBECONFIG File not found"
      exit 1;
fi


if [[ $BRANCH_NAME = release ]]
then
  cwd=`pwd`
  cd /var/lib/jenkins/release-manifest
  #echo $dimg_name
  cat cbsv2poc.releasecontentdefinition/release_manifest.json | grep -w $dimg_name >/dev/null
      if [ $? -ne 0 ]
      then
         echo "The $dimg_name not marked for release, So exiting "
         exit -1
      else
        cd $cwd
        VERSION=`jq -r .version package.json`
        #echo "VERSION DETAILS :$VERSION $Source "
        curl -u admin:admin567 -s $nex_ip:$rport/v2/$dimg_name/tags/list | jq -r '.tags[]' | grep $VERSION >/dev/null
        #curl -u admin:admin567 -s $nex_ip:$rport/v2/$dimg_name/tags/list | jq -r '.tags[]'
        if [ $? -ne 0 ]
         then
         echo  "!!! The $dimg_name not present in Nexus Repo, So exiting !!! "
         exit -1
        else
         echo  "!!! The Docker Image $dimg_name  present in Nexus Release Repo !!! "
        fi

      fi

fi
#cd k8-manifestfiles
}

function approval()
{
  #echo "Ï AM INSIDE APPROVAL : $dimg_name :"
  if [[ $BRANCH_NAME = release ]]
  then
    cwd=`pwd`
    cd /var/lib/jenkins/release-manifest
    cat cbsv2poc.releasecontentdefinition/release_manifest.json | grep -w $dimg_name >/dev/null
    if [ $? -ne 0 ]
    then
      echo "The $dimg_name not approved for release,So exiting"
      exit -1
    else
      echo "!!! The $dimg_name approved for release !!!"
    fi
    cd $cwd
  else
    echo "Auto approval for dev branch"
  fi

}

function database_scripts()
{
  echo "DB SCRIPTS NOT PRESENT "
}

function deployment()
{
  export KUBECONFIG=/var/lib/jenkins/scripts/KUBECONFIG/kube.yml
  VERSION=`jq -r .version package.json`
  cd k8-manifest
  if [[ $BRANCH_NAME = release ]]
  then
    cwd=`pwd`
    cd /var/lib/jenkins/release-manifest
    deploy_env=`jq -r .CBS[].Environment cbsv2poc.releasecontentdefinition/release_manifest.json`
    cd $cwd
    echo "Deploying $dimg_name:$VERSION in $deploy_env namespace"
    #echo $deploy_env
    cd $deploy_env
    #cat deployment.yaml
    sed -i "s/xxxx/$VERSION/g" deployment.yaml
    #sed -i "s/xxxx/$VERSION/" deployment.yaml
    cat deployment.yaml
  fi
   #echo $deploy_env
  #cd $deploy_env
  #echo "PWD:"
  #pwd
    if [[ $BRANCH_NAME = develop ]]
    then
        cd dev
    fi
  deployment_name=$(cat deployment.yaml | grep name: | grep -v - | awk '{ print $2 }')
  echo $deployment_name
  kubectl delete deployment $deployment_name -n $deploy_env
  #kubectl delete -f deployment.yaml
  sleep 5
kubectl apply -f deployment.yaml
 if [ $? -ne 0 ]
      then
         echo "Deployment Failed"
         exit -1;
 fi
kubectl apply -f service.yaml
 if [ $? -ne 0 ]
      then
         echo "Service Failed"
         exit -1;
 fi
}

function post_deploy()
{
#export KUBECONFIG=/var/lib/jenkins/scripts/KUBECONFIG/tkgm-wld-poc-dev-admin-config
#kubectl get pod -n dev
#kubectl apply -f *.yaml -n dev
#kubectl expose deployment uibase --type=NodePort --name=npuibase -n dev
echo "!!! Post Deploy !!!"
}


if [ $instruction = verfiy ]
then
  verify
echo "! ! ! Verification completed ! ! !"

elif [ $instruction = approval ]
then
 approval

elif [ $instruction = dbscript ]
then
 database_scripts

elif [ $instruction = deployment ]
then
 deployment
 echo "Deployment"

 elif [ $instruction = post_deploy ]
then
 post_deploy
 echo " !!! Post deployment !!!"
else
  echo "/var/lib/jenkins/scripts/main.sh (validate/build/unittest/sonarscanner/fortify/nexus-push)"
fi
