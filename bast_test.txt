#!/bin/bash
#img_name=`basename $(find -iname *.csproj | grep -iv unittest) | sed 's/.csproj//g'`
#img_name=``echo $GIT_URL | awk -F / '{print $(NF)}' | sed s/'.git'//``
img_name=`echo $GIT_URL | awk -F / '{print $(NF)}' |  sed s/'.git'//`
dimg_name=`echo $img_name | tr '[:upper:]' '[:lower:]'`
instruction=$1
#echo $BRANCH_NAME
OBRANCH_NAME=$BRANCH_NAME
if [[ $BRANCH_NAME = *feature* ]]
then
    BRANCH_NAME=feature
fi
env >>/tmp/webuici.env
. /var/lib/jenkins/scripts/environment_version.sh
. /var/lib/jenkins/scripts/$BRANCH_NAME
nex_ip=10.60.17.13
port=1415
rport=1416
SonarQubeServer="http://******:9000"
SonarLogin="***************"
 if [[ $BRANCH_NAME = *release* ]]
then
  CWD=`pwd`
  cd /var/lib/jenkins/release-manifest
  rm -rf cbsv2poc.releasecontentdefinition >/dev/null
  git clone --quiet https://github.**************.releasecontentdefinition.git
  JSON_VERSION=`cat *******.releasecontentdefinition/release_manifest.json | jq -r --arg img_name $img_name '.CBS[].FrontEnd[] | select(.ServiceName==$img_name) | .Version'` >/dev/null
 NEW_VERSION=$JSON_VERSION.$BUILD_ID
 cd $CWD
 fi
function validation()
{
  if [[ $BRANCH_NAME = *release* ]]
then
    #BRANCH_NAME=feature
    #CWD=`pwd`
  #  cd /var/lib/jenkins/release-manifest
  #rm -rf cbsv2poc.releasecontentdefinition >/dev/null
  #git clone https://github.**********.releasecontentdefinition.git
  #JSON_VERSION=`cat cbsv2poc.releasecontentdefinition/release_manifest.json | jq -r --arg img_name $img_name '.CBS[].FrontEnd[] | select(.ServiceName==$img_name) | .Version'`
  #echo "img_name $img_name,dimg_name $dimg_name, JSON_VERSION: $JSON_VERSION"
  #echo "BUILD_ID: $BUILD_ID"
  #declare -g NEW_VERSION=$JSON_VERSION.$BUILD_ID
  #echo "NEW VERSION: $NEW_VERSION"
  #cd $CWD
  git checkout release
 jq --arg new_version "$NEW_VERSION" '.version = $new_version' "package.json" >package1.json
 mv package1.json package.json
 git add -f package.json
 git commit -m "VERSION NO UPDATE FROM CI PIPELINE $NEW_VERSION"
 #git push origin
  git pull origin
 git push --set-upstream origin release
  #env >>/tmp/env
fi
# npm install
npm install --legacy-peer-deps

  #if [ $? -eq 0 ]
  #then
        #npm run lint
        #exit $?
  #else
   #  echo "!!! Failed npm install !!! "
    # exit 1
  #fi

#  VERSION=`cat $Filepath | grep -oPm1 "(?<=<AssemblyVersion>)[^<]+"`
  #rm -rf cbsv2poc.releasecontentdefinition >/dev/null
  #git clone https://github.*****************.releasecontentdefinition.git
  #JSON_VERSION=`cat cbsv2poc.releasecontentdefinition/release_content_definition.json | jq --arg img_name $img_name '.CBS[].BackEnd[] | select(.ServiceName==$img_name) | .Version'`
  #if [[ \"$VERSION\" == $JSON_VERSION ]]
  #then
#         echo "Version Matched"

  #else
    #echo "Version Mismatch, So stopping the build";
    #exit 1;
  ##fi

# if [[ $BRANCH_NAME = *release* ]]
#then

# docker images | grep $dimg_name  | grep -v  $nex_ip:$port
#  if [ $? -eq 0 ]
#  then
#     docker rmi $dimg_name:$NEW_VERSION
#  fi

#  docker images | grep $dimg_name
#  if [ $? -eq 0 ]
#  then
#     docker rmi $nex_ip:$port/$dimg_name:$NEW_VERSION
#  fi
#else
#  docker images | grep $dimg_name  | grep -v  $nex_ip:$port
#  if [ $? -eq 0 ]
#  then
#     docker rmi $dimg_name:${tag[$BRANCH_NAME]}
# fi

# docker images | grep $dimg_name
# if [ $? -eq 0 ]
# then
#    docker rmi $nex_ip:$port/$dimg_name:${tag[$BRANCH_NAME]}
# fi
#fi
}


function sourcecode_build()
{
        npm run build
         if [ $? -eq 0 ]
        then
          echo "!!! NPM BUILD Sucess !!!"
        else
          echo "!!! NPM BUILD FAILED !!! "
          exit 1;
        fi
}

function docker_build()
{
   echo "FROM nginx:stable-alpine" >Dockerfile
   echo "WORKDIR /usr/share/nginx/html" >>Dockerfile
   echo "RUN rm -rf ./*" >>Dockerfile
   echo "COPY  dist/$dimg_name . " >>Dockerfile
   echo "ENTRYPOINT [ \"nginx\",\"-g\", \"daemon off;\" ]" >>Dockerfile
 if [[ $BRANCH_NAME = *release* ]]
then
   docker build --no-cache -t $dimg_name:$NEW_VERSION .
else
   docker build --no-cache -t $dimg_name:${tag[$BRANCH_NAME]} .
fi
  exit $?
}
function unittest()
{
    CWD=`pwd`
    npm run test >UNITTEST
    returnstatus=$?
    #unittestfile=`cat $UNITTEST  | grep "Results File" | awk '{ print $3 }'`
    #echo "Unit Test File : $unittestfile"
    cd /var/lib/jenkins/UnitTestResults
     git checkout feauture
    ##cd
        if [ ! -d "$img_name" ]
        then
                mkdir $img_name
        fi
       cd $img_name
       cp $CWD/UNITTEST  UnittestResult-$(date +%Y%m%d%H%M)
    #git switch feauture
    git add -f   UnittestResult-$(date +%Y%m%d%H%M)
    git commit -m "UnitTest Report generated from  $OBRANCH_NAME branch  @$(date +%Y-%m-%d_%H:%M)"
    git push
    echo $returnstatus
    cd $CWD
       npm run coverage
          if [ $? -eq 0 ]
        then
                echo " !!! Code Coverage Stage Completed !!!"
        else
                echo " !!! Code Coverage failed !!!"
                exit 1;
        fi
    exit $returnstatus
}

function sonarscan()
{

  #echo " !!! I am inside SonarScanner !!! "
  echo "sonar.host.url=http://*******:9000" >sonar-project.properties
  echo "sonar.login=***********8" >>sonar-project.properties
  echo "sonar.projectKey=$img_name.$BRANCH_NAME" >>sonar-project.properties
  #echo " !!! I am inside SonarScanner !!! "
  echo "sonar.host.url=http://******8:9000" >sonar-project.properties
  echo "sonar.login=******************" >>sonar-project.properties
  echo "sonar.projectKey=$img_name.$BRANCH_NAME" >>sonar-project.properties
  #echo " !!! I am inside SonarScanner !!! "
  echo "sonar.host.url=http://**********:9000" >sonar-project.properties
  echo "sonar.login=*******************" >>sonar-project.properties
  echo "sonar.projectKey=$img_name.$BRANCH_NAME" >>sonar-project.properties
  echo "sonar.projectName=$img_name.$BRANCH_NAME" >>sonar-project.properties
  echo "sonar.projectVersion=1.0" >>sonar-project.properties
  echo "sonar.sourceEncoding=UTF-8" >>sonar-project.properties
  echo "sonar.sources=src" >>sonar-project.properties
  echo "sonar.exclusions=**/node_modules/**" >>sonar-project.properties
  echo "sonar.tests=src" >>sonar-project.properties
  echo "sonar.test.inclusions=**/*.spec.ts" >>sonar-project.properties
  echo "sonar.typescript.lcov.reportPaths=coverage/reports/lcov.info" >>sonar-project.properties

        reportprocessingurl=`npm run sonar 2>/dev/null | grep "More about the report processing at" |  awk '{ print $8 }'`
    echo $reportprocessingurl >>/tmp/coverage-reportprocess
    if [ $? -eq 1 ]; then
      echo "Sonnar Scanner Failed for Coverage . . .";
      exit 1;
    else
            reportstatus=`curl -s -u admin:admin123 $reportprocessingurl | jq -r '.task.status'`
            echo $reportstatus >>/tmp/creport
            i=0;
            while [[ $reportstatus != "SUCCESS" ]]
    do
      echo "Report Generation Going on ... Checking after 5 min" >>/tmp/creport
      sleep 5;
      reportstatus=`curl -s -u admin:admin123 $reportprocessingurl | jq -r '.task.status'`
      echo $reportstatus >>/tmp/creport
      if [[ $i > 10 ]]
      then
             echo "Report Processing take more than expected time"
             break ;
      fi
      i=$i+1;
    done
    echo "Report Generation Done... Kindly Check in SonarQube Url"
    echo "For detail report kindly visit $SonarQubeServer/dashboard?id=$img_name.$BRANCH_NAME"
  fi
  projstatus=`curl -s -u admin:admin*****  $SonarQubeServer/api/qualitygates/project_status?projectKey=$img_name.$BRANCH_NAME | jq -r '.projectStatus.status'`
  echo $projstatus >/tmp/cprojstatus
  if [[ $projstatus == "ERROR"  ]]
  then
     echo "!!! SonarQube Project Status Failed !!!"
     exit 1
  else
        echo "!!! SonarQube Project Status Success !!!"
  fi
}

function nexus()
{

 if [[ $BRANCH_NAME = *release* ]]
then
 docker tag $dimg_name:$NEW_VERSION  $nex_ip:$rport/$dimg_name:$NEW_VERSION
 docker push $nex_ip:$rport/$dimg_name:$NEW_VERSION
 docker rmi $nex_ip:$rport/$dimg_name:$NEW_VERSION
 docker rmi $dimg_name:$NEW_VERSION
else
 docker tag $dimg_name:${tag[$BRANCH_NAME]}  $nex_ip:$port/$dimg_name:${tag[$BRANCH_NAME]}
 docker push $nex_ip:$port/$dimg_name:${tag[$BRANCH_NAME]}
 docker rmi $dimg_name:${tag[$BRANCH_NAME]}
 docker rmi $nex_ip:$port/$dimg_name:${tag[$BRANCH_NAME]}
 fi
}

if [ $instruction = validate ]
then
  validation
echo "Validation"

elif [ $instruction = sourcecode_build ]
then
sourcecode_build
 echo Soure Code Build

elif [ $instruction = docker_build ]
then
 docker_build
 echo "Docker-build"

elif [ $instruction = unittest ]
then
  unittest
  echo "unit test"

elif [ $instruction = sonarscan ]
then
 sonarscan
 echo "Sonarscan   . . ."

elif [ $instruction = fortify ]
then
  echo "fortify vulnerability scanning . . ."

elif [ $instruction = nex_push ]
then
    nexus
     echo `pwd`
    echo "Pushing to Nexus Repository . . ."
#    rm -rf *

else
  echo "/var/lib/jenkins/scripts/main.sh (validate/build/unittest/sonarscanner/fortify/nexus-push)"
fi
